<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[东东的小窝]]></title>
    <link href="http://neemor.github.io/atom.xml" rel="self"/>
    <link href="http://neemor.github.io/"/>
    <updated>2017-09-30T14:21:44+08:00</updated>
    <id>http://neemor.github.io/</id>
    <author>
        <name><![CDATA[潘东东]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[面向对象三大基本特征，五大基本原则]]></title>
        <link href="http://neemor.github.io/blog/2017/09/30/objectoriented/"/>
        <updated>2017-09-30T14:14:36+08:00</updated>
        <id>http://neemor.github.io/blog/2017/09/30/objectoriented</id>
        <content type="html"><![CDATA[<p>透切理解面向对象三大基本特性是理解面向对象五大基本原则的基础.</p>

<h3>三大特性是：封装,继承,多态</h3>

<p> <!--more--></p>

<h4>所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</h4>

<h4>所谓继承是指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</h4>

<h4>所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</h4>

<p>五大基本原则</p>

<h4>单一职责原则SRP(Single Responsibility Principle)</h4>

<p>是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。</p>

<h4>开放封闭原则OCP(Open－Close Principle)</h4>

<p>一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，
那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。</p>

<h4>替换原则(the Liskov Substitution Principle LSP)</h4>

<p>子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，
也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。</p>

<h4>依赖原则(the Dependency Inversion Principle DIP)</h4>

<p>具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，
这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到
了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。</p>

<h4>接口分离原则(the Interface Segregation Principle ISP)</h4>

<p>模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来.客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[女朋友总爱晚上吃东西，我该如何保持身材？]]></title>
        <link href="http://neemor.github.io/blog/2017/09/29/9-slash-29/"/>
        <updated>2017-09-29T16:33:00+08:00</updated>
        <id>http://neemor.github.io/blog/2017/09/29/9-slash-29</id>
        <content type="html"><![CDATA[<h3>妹子特么都有男朋友了 还不能放肆的吃？</h3>

<!--more-->  


<p><img src="http://neemor.github.io/images/mgmd.jpg" alt="ku" /></p>

<h3>所以晚上吃什么</h3>

<p><img src="http://neemor.github.io/images/wbk.jpg" alt="kk" /></p>

<h3>管你身材好不好哟 ！！</h3>

<h2>我要吃的时候 你不让我吃 不陪我吃！！</h2>

<h1>就是不爱我 哼！！</h1>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[我是个什么样的人]]></title>
        <link href="http://neemor.github.io/blog/2017/09/28/2/"/>
        <updated>2017-09-28T21:12:23+08:00</updated>
        <id>http://neemor.github.io/blog/2017/09/28/2</id>
        <content type="html"><![CDATA[<h3>我到底是个什么样的人？</h3>

<p>我是一个矛盾的人，在熟人面前我可以表现的从容不迫，甚至可以很会表现，有点像开心果那样的人，宿舍的人在跟我聊天的时候我很放松，聊起来也是哈哈大笑不止</p>

<p><!--more-->，我的思维就像脱了犟的野马，很活跃，说话很有调理，很幽默，脑子转的很快，有时候发现自己真的很会逗人开心；</p>

<p>但是我在外面的时候，特别是人多多时候，特别是很多人看着我的时候，心里素质就崩溃了，我不知道说什么，这时候，心跳加速到自己可以感觉到她的跳动，嘴巴周围肌肉都是紧张的，有点开不了口的感觉，脸也是像充满了血，胀涨的感觉，这个时候说话的时候声音都是颤抖的，完全表达不出来，怎么会这样呢？以前上大学的时候，我也经常在台上发言的，有时候也会这样，但有时候自己有可以完全发挥出来，一下子讲一个小时不用停止的，赢来阵阵掌声，我自己到底怎么了？？？心里素质就那么脆弱吗？遇到事情的时候，比如现在的找工作了，我也迷茫，我担心，我害怕，感觉自己都不是个男人，我像得了精神分裂了，两面人，我这个人很敏感，对什么事都是这样，喜欢把话藏在心里，我曾经喜欢过两个人，在其中一个我们很谈得来，但有时候嘴巴也会变得很愚钝，但是很可惜不能在一起，现在的这个女孩，我们谈得来的很少，在她面前我夸夸其谈，因为我们在一起的时候她很少说话，除非很开心才会跟我开玩笑，一般都是我再说，反而给她留的印象是我是个滑头，，不知道到底是个什么样的人了</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Apache配置虚拟机]]></title>
        <link href="http://neemor.github.io/blog/2017/09/28/1/"/>
        <updated>2017-09-28T20:38:39+08:00</updated>
        <id>http://neemor.github.io/blog/2017/09/28/1</id>
        <content type="html"><![CDATA[<h6>Virtual hosts</h6>

<h4>Include conf/extra/httpd-vhosts.conf</h4>

<p>找到 上面相关文本，去掉#Include conf/extra/httpd-vhosts.conf前的#。</p>

<h6>Virtual hosts</h6>

<p>Include conf/extra/httpd-vhosts.conf</p>

<p>  <!-- more -->
保存退出。
3、编辑conf目录下extra文件夹下的httpd-vhosts.conf。
去掉实例配置，添加新有配置。以新浪微博为例，配置文件如下：</p>

<h5>#</h5>

<h6>Virtual Hosts</h6>

<h5>#</h5>

<h6>If you want to maintain multiple domains/hostnames on your</h6>

<h6>machine you can setup VirtualHost containers for them. Most configurations</h6>

<h6>use only name-based virtual hosts so the server doesn&rsquo;t need to worry about</h6>

<h6>IP addresses. This is indicated by the asterisks in the directives below.</h6>

<h5>#</h5>

<h6>Please see the documentation at</h6>

<h6>&lt;URL:<a href="http://httpd.apache.org/docs/2.2/vhosts/">http://httpd.apache.org/docs/2.2/vhosts/</a>></h6>

<h6>for further details before you try to setup virtual hosts.</h6>

<h5>#</h5>

<h6>You may use the command line option &lsquo;-S&rsquo; to verify your virtual host</h6>

<h6>configuration.</h6>

<h5>#</h5>

<h6>Use name-based virtual hosting.</h6>

<h5>#</h5>

<p>NameVirtualHost *:80</p>

<h5>#</h5>

<h6>VirtualHost example:</h6>

<h6>Almost any Apache directive may go into a VirtualHost container.</h6>

<h6>The first VirtualHost section is used for all requests that do not</h6>

<h6>match a ServerName or ServerAlias in any <VirtualHost> block.</h6>

<h5>#</h5>

<p><VirtualHost *:80>
    ######管理员邮箱
    ServerAdmin <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x6a;&#x69;&#x61;&#x6e;&#x67;&#x66;&#101;&#x6e;&#103;&#x33;&#x40;&#x73;&#116;&#x61;&#102;&#x66;&#46;&#115;&#105;&#x6e;&#97;&#x2e;&#x63;&#111;&#109;&#46;&#x63;&#110;">&#x6a;&#x69;&#97;&#110;&#x67;&#x66;&#x65;&#x6e;&#103;&#51;&#64;&#115;&#x74;&#x61;&#x66;&#x66;&#46;&#115;&#x69;&#x6e;&#x61;&#x2e;&#x63;&#111;&#x6d;&#46;&#99;&#110;</a>
    ######项目根目录 <br/>
    DocumentRoot &ldquo;D:/htdocs/frame_export&rdquo;    <br/>
    ######域名
    ServerName test.t.sina.com.cn<br/>
    ######别名                    <br/>
    ServerAlias test.t.sina.com.cn
    ######错误日志路径
    ErrorLog &ldquo;logs/test.t.sins.com.cn-error.log&rdquo;
    CustomLog &ldquo;logs/test.t.sins.com.cn-access.log&rdquo; common
    RewriteEngine on
    ######重写规则，可根据实际需要添加
    RewriteRule  ^/(.*)$       /apps/index.php [L]
</VirtualHost>
4、编辑本地host文件，以windows为例
进入C:\Windows\System32\drivers\etc
记事本打开hosts文件
最后添加
 127.0.0.1       localhost
 127.0.0.1       test.t.sina.com.cn
例子：</p>

<h6>Copyright &copy; 1993-2009 Microsoft Corp.</h6>

<h5>#</h5>

<h6>This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</h6>

<h5>#</h5>

<h6>This file contains the mappings of IP addresses to host names. Each</h6>

<h6>entry should be kept on an individual line. The IP address should</h6>

<h6>be placed in the first column followed by the corresponding host name.</h6>

<h6>The IP address and the host name should be separated by at least one</h6>

<h6>space.</h6>

<h5>#</h5>

<h6>Additionally, comments (such as these) may be inserted on individual</h6>

<h6>lines or following the machine name denoted by a &lsquo;######&rsquo; symbol.</h6>

<h5>#</h5>

<h6>For example:</h6>

<h5>#</h5>

<h6>102.54.94.97     rhino.acme.com          ###### source server</h6>

<h6>38.25.63.10     x.acme.com              ###### x client host</h6>

<h6>localhost name resolution is handled within DNS itself.</h6>

<p> 127.0.0.1       localhost</p>

<h6>::1             localhost</h6>

<p> 127.0.0.1       test.t.sina.com.cn
保存退出
5、重启apache，浏览器输入<a href="http://test.t.sina.com.cn">http://test.t.sina.com.cn</a></p>
]]></content>
    </entry>
    
</feed>
